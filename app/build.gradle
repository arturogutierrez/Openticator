apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.fabric'

android {
  def globalConfiguration = rootProject.extensions.getByName("ext")

  compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
  buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

  defaultConfig {
    minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
    targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

    applicationId globalConfiguration.getAt("androidApplicationId")
    versionCode globalConfiguration.getAt("androidVersionCode")
    versionName globalConfiguration.getAt("androidVersionName")

    resValue "string", "default_package_name", globalConfiguration.getAt("androidApplicationId")

    // Vector Drawables for Gradle 2.0.
    // Compat toolbar use it internally
    vectorDrawables.useSupportLibrary = true
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  dexOptions {
    preDexLibraries true
    javaMaxHeapSize '2G'
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
  }

  lintOptions {
    ignore 'InvalidPackage'
  }

  signingConfigs {
    release {
      storeFile file("../app.keystore.jks")
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix ".debug"
    }
    release {
      minifyEnabled false
      signingConfig = signingConfigs.release
    }
  }
}

kapt {
  generateStubs = true
}

dependencies {
  def presentationDependencies = rootProject.ext.presentationDependencies

  compile project(':domain')
  compile project(':data')

  compile presentationDependencies.anko
  compile presentationDependencies.ankoSupport
  compile presentationDependencies.supportVersion
  compile presentationDependencies.appCompat
  compile presentationDependencies.design
  compile presentationDependencies.recyclerView
  compile presentationDependencies.butterKnife
  compile presentationDependencies.fab
  compile presentationDependencies.dexter
  compile presentationDependencies.zxingCore
  compile presentationDependencies.zxing
  compile presentationDependencies.materialDialogs
  compile(presentationDependencies.materialDrawer) {
    transitive = true
  }
  compile(presentationDependencies.crashlytics) {
    transitive = true;
  }

  kapt presentationDependencies.daggerCompiler
  compile presentationDependencies.dagger
  compile presentationDependencies.rxJava
  compile presentationDependencies.rxAndroid
  provided presentationDependencies.javaxAnnotation
}

play {
  jsonFile = file('../gplay-secret.json')
  track = 'beta'
}

def (releaseKeystorePassword, releaseKeyAlias, releaseKeyPassword) = signingConfigFromFile()
if (releaseKeystorePassword != null && releaseKeyAlias != null && releaseKeyPassword != null) {
  android.signingConfigs.release.storePassword = releaseKeystorePassword
  android.signingConfigs.release.keyAlias = releaseKeyAlias
  android.signingConfigs.release.keyPassword = releaseKeyPassword
} else {
  println "Unable to find the right credentials to sign the apk :("
  android.buildTypes.release.signingConfig = null
}

def signingConfigFromFile() {
  println '-> signingConfigFromFile'
  def Properties props = new Properties()
  def propFile = file('../signing.properties')

  if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
        props.containsKey('STORE_PASSWORD') &&
        props.containsKey('KEY_ALIAS') &&
        props.containsKey('KEY_PASSWORD')) {

      def keystorePassword = props['STORE_PASSWORD']
      def keyAlias = props['KEY_ALIAS']
      def keyPassword = props['KEY_PASSWORD']

      return [keystorePassword, keyAlias, keyPassword]
    } else {
      println 'signing.properties found but some entries are missing'
    }
  } else {
    println 'signing.properties not found'
  }

  return [null, null, null]
}
